# Define the weightage for each field
# ...

import random
import pandas as pd
import numpy as np
import math

# Define the options for each field
residence_types = ['Bungalow', 'Apartment', 'Condominium', 'Terrace']
tenure_types = ['Freehold', 'Leasehold']
furnishing_types = ['Full', 'Partial', 'No']
location_categories = ['Suburb', 'Town', 'Rural']
states = ['Johor', 'Kedah', 'Kelantan', 'Melaka', 'Negeri Sembilan', 'Pahang', 'Penang', 'Perak', 'Perlis', 'Sabah',
          'Sarawak', 'Selangor', 'Terengganu', 'Kuala Lumpur']
adjectives = ["Luxurious", "Charming", "Modern", "Spacious", "Quaint", "Elegant", "Cozy"]

# Define the weightage for each field
residence_types_weights = {'Bungalow': 1.2, 'Apartment': 1.0, 'Condominium': 1.1, 'Terrace': 1.0}
tenure_types_weights = {'Freehold': 1.2, 'Leasehold': 1.0}
furnishing_types_weights = {'Full': 1.2, 'Partial': 1.0, 'No': 0.8}
extra_facility_weights = {0: 0.8, 1: 0.9, 2: 1.0, 3: 1.1, 4: 1.2, 5: 1.3}
location_categories_weights = {'Suburb': 1.3, 'Town': 1.0, 'Rural': 0.8}
state_weights = {'Johor': 1.2, 'Kedah': 0.8, 'Kelantan': 0.7, 'Melaka': 1.0, 'Negeri Sembilan': 0.9, 'Pahang': 0.75,
                 'Penang': 1.0, 'Perak': 0.95, 'Perlis': 0.65, 'Sabah': 0.75, 'Sarawak': 0.8, 'Selangor': 1.8,
                 'Terengganu': 0.65, 'Kuala Lumpur': 2.0}
BedBath = {1: 0.9, 2: 1.0, 3: 1.1, 4: 1.2, 5: 1.3, 6: 1.4}


def sizeweight(sq):
    weight = sq / 1264
    return weight


# Generate the dataset
num_properties = 1000
property_listings = []
for _ in range(num_properties):
    Bedrooms = random.randint(1, 6)
    Bathrooms = min(max(1, Bedrooms + random.randint(-2, 2)), 6)
    residence = random.choice(residence_types)
    State = random.choice(states)

    property_listing = {
        'PropertyName': f"{random.choice(adjectives)} {residence}",
        'ResidenceType': residence,
        'TenureType': random.choice(tenure_types),
        'NumberOfBedrooms': Bedrooms,
        'NumberOfBathrooms': Bathrooms,
        'Furnishing': random.choice(furnishing_types),
        'ExtraFacilities': random.randint(0, 5),
        'Size': max(min(round(random.normalvariate(1264, 750), 2), 5000), 500),
        'LocationCategory': random.choice(location_categories),
        'Address': f'Jalan {random.choice(location_categories)} {State}',
        'State': State
    }
    property_listings.append(property_listing)

prices = {}
# ...

# Calculate Price
for property_listing in property_listings:
    price = random.randint(100000, 10000000) * \
            residence_types_weights[property_listing['ResidenceType']] * \
            tenure_types_weights[property_listing['TenureType']] * \
            furnishing_types_weights[property_listing['Furnishing']] * \
            extra_facility_weights[property_listing['ExtraFacilities']] * \
            location_categories_weights[property_listing['LocationCategory']] * \
            state_weights[property_listing['State']] * \
            BedBath[property_listing['NumberOfBedrooms']] * \
            BedBath[property_listing['NumberOfBathrooms']] * \
            sizeweight(property_listing['Size'])

    property_listing['Price2013'] = round(price, 2)
    state = property_listing['State']
    if state not in prices:
        prices[state] = []
    prices[state].append(round(price, 2))

# Calculate the average prices
average_prices = {}
for state, state_prices in prices.items():
    total_price = sum(state_prices)
    count = len(state_prices)
    average_prices[state] = total_price / count

state_average = {
    'Johor': 446800,
    'Kedah': 260500,
    'Kelantan': 308000,
    'Melaka': 267000,
    'Negeri Sembilan': 349744,
    'Pahang': 260000,
    'Penang': 330000,
    'Perak': 246050,
    'Perlis': 223170,
    'Sabah': 320000,
    'Sarawak': 374500,
    'Selangor': 440000,
    'Terengganu': 270286,
    'Kuala Lumpur': 507500
}

# Adjust Prices
for property_listing in property_listings:
    state = property_listing['State']
    price = property_listing['Price2013']
    ratio = state_average[state] / average_prices[state]  # Default to 0 if state not found
    property_listing['Price2013'] = round(property_listing['Price2013'] * ratio, 2)

# Define the price increase per year
price_increase_per_year = {
    2014: 1.013,
    2015: 1.014,
    2016: 1.017,
    2017: 1.020,
    2018: 1.022,
    2019: 1.025,
    2020: 1.027,
    2021: 1.030,
    2022: 1.034,
    2023: 1.037
}
scale = []
# Scale the price for each year
for property_listing in property_listings:
    year = 2014  # Start from 2014
    while year <= 2023:
        mean = price_increase_per_year[year]
        nMin = mean - 0.02
        nMax = mean + 0.02
        div = 0.01

        last_year = year-1

        scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
        scale_factor = np.clip(scale_factor, nMin, nMax)

        scale_factor = scale_factor * \
            residence_types_weights[property_listing['ResidenceType']] * \
            tenure_types_weights[property_listing['TenureType']] * \
            furnishing_types_weights[property_listing['Furnishing']] * \
            extra_facility_weights[property_listing['ExtraFacilities']] * \
            location_categories_weights[property_listing['LocationCategory']] * \
            state_weights[property_listing['State']] * \
            BedBath[property_listing['NumberOfBedrooms']] * \
            BedBath[property_listing['NumberOfBathrooms']] * \
            sizeweight(property_listing['Size'])
        

        if scale_factor >= 1:
            scale_factor = scale_factor/2
        
        if scale_factor <= 0.5:
            scale_factor = 0.5
            scale_factor += random.uniform(0.1,0.5)
        
        scale.append(scale_factor)
        
        if property_listing[f'Price{last_year}'] <= 10000:
            scale_factor += 0.1 * (year-2014)
            if scale_factor >= 1:
                scale_factor = 0.9

        scaled_price = property_listing[f'Price{last_year}'] * scale_factor
        property_listing[f'Price{year}'] = round(scaled_price, 2)

        year += 1

# Save the dataset as a csv file
print(sum(scale)/len(scale))

df = pd.DataFrame(property_listings)
df.to_csv('property_listings3.csv', index=False)