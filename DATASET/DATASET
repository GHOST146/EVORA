import random
import pandas as pd
import numpy as np
import math

# Define the options for each field
residence_types = ['Bungalow', 'Apartment', 'Condominium', 'Terrace']
tenure_types = ['Freehold', 'Leasehold']
furnishing_types = ['Full', 'Partial', 'No']
location_categories = ['Suburb', 'Town', 'Rural']
states = ['Johor', 'Kedah', 'Kelantan', 'Melaka', 'Negeri Sembilan', 'Pahang', 'Penang', 'Perak', 'Perlis', 'Sabah', 'Sarawak', 'Selangor', 'Terengganu', 'Kuala Lumpur']
adjectives = ["Luxurious", "Charming", "Modern", "Spacious", "Quaint", "Elegant", "Cozy"]

# Define the weightage for each field
residence_types_weights = {'Bungalow': 1.2, 'Apartment': 1.0, 'Condominium': 1.1, 'Terrace': 1.0}
tenure_types_weights = {'Freehold': 1.2, 'Leasehold' : 1.0}
furnishing_types_weights = {'Full': 1.2, 'Partial': 1.0 , 'No': 0.8}
extra_facility_weights = {0:0.8, 1:0.9, 2:1.0, 3:1.1, 4:1.2, 5:1.3}
location_categories_weights = {'Suburb': 1.3, 'Town': 1.0, 'Rural': 0.8}
state_weights = {'Johor': 1.2,'Kedah': 0.8,'Kelantan': 0.7,'Melaka': 1.0,'Negeri Sembilan': 0.9,'Pahang': 0.75,'Penang':1.0,'Perak': 0.95,'Perlis': 0.65,'Sabah': 0.75,'Sarawak': 0.8,'Selangor': 1.8,'Terengganu': 0.65,'Kuala Lumpur':2.0}
BedBath = {1:0.9, 2:1.0, 3:1.1, 4:1.2, 5:1.3, 6:1.4}

def sizeweight(sq):
    weight = sq/1264
    return weight


# Generate the dataset
num_properties = 1000
property_listings = []
for _ in range(num_properties):
    Bedrooms = random.randint(1,6)
    Bathrooms = min(max(1, Bedrooms + random.randint(-2, 2)), 6)
    residence = random.choice(residence_types)
    State = random.choice(states)
    
    
    property_listing = {
        'PropertyName': f"{random.choice(adjectives)} {residence}",
        'ResidenceType': residence,
        'TenureType': random.choice(tenure_types),
        'NumberOfBedrooms': Bedrooms,
        'NumberOfBathrooms': Bathrooms,
        'Furnishing': random.choice(furnishing_types),
        'ExtraFacilities': random.randint(0,5),
        'Size': max(min(round(random.normalvariate(1264, 750), 2), 5000), 500),
        'LocationCategory': random.choice(location_categories),
        'Address': f'Jalan {random.choice(location_categories)} {State}',
        'State': State
    }
    property_listings.append(property_listing)
    
prices = {}

# Calculate Price
for property_listing in property_listings:
    price = random.randint(100000, 10000000) * \
        residence_types_weights[property_listing['ResidenceType']] * \
        tenure_types_weights[property_listing['TenureType']] * \
        furnishing_types_weights[property_listing['Furnishing']] * \
        extra_facility_weights[property_listing['ExtraFacilities']] * \
        location_categories_weights[property_listing['LocationCategory']] * \
        state_weights[property_listing['State']] * \
        BedBath[property_listing['NumberOfBedrooms']] * \
        BedBath[property_listing['NumberOfBathrooms']] * \
        sizeweight(property_listing['Size'])
    
    property_listing['Price'] = round(price, 2)
    state = property_listing['State']
    if state not in prices:
        prices[state] = []
    prices[state].append(round(price, 2))

average_prices = {}

for state, state_prices in prices.items():
    total_price = sum(state_prices)
    count = len(state_prices)
    average_prices[state] = total_price / count

state_average = {
    'Johor': 446800,
    'Kedah': 260500,
    'Kelantan': 308000,
    'Melaka': 267000,
    'Negeri Sembilan': 349744,
    'Pahang': 260000,
    'Penang': 330000,
    'Perak': 246050,
    'Perlis': 223170,
    'Sabah': 320000,
    'Sarawak': 374500,
    'Selangor': 440000,
    'Terengganu': 270286,
    'Kuala Lumpur': 507500
}

# Adjust Prices
for property_listing in property_listings:
    state = property_listing['State']
    price = property_listing['Price']
    ratio = state_average[state] / average_prices[state] # Default to 0 if state not found
    property_listing['Price'] = round(property_listing['Price'] * ratio,2)


# Calculate the 'PricePerSquareFeet' separately
for property_listing in property_listings:
    property_listing['PricePerSquareFeet'] = round(property_listing['Price'] / property_listing['Size'], 2)

# Scale the price for 2014
mean = 1.013
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price'] * scale_factor
    property_listing['Price2014'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2014'] = round(property_listing['Price2014'] / property_listing['Size'], 2)

# Scale the price for 2015
mean = 1.014
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2014'] * scale_factor
    property_listing['Price2015'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2015'] = round(property_listing['Price2015'] / property_listing['Size'], 2)

# Scale the price for 2016
mean = 1.017
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2015'] * scale_factor
    property_listing['Price2016'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2016'] = round(property_listing['Price2016'] / property_listing['Size'], 2)

# Scale the price for 2017
mean = 1.020
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2016'] * scale_factor
    property_listing['Price2017'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2017'] = round(property_listing['Price2017'] / property_listing['Size'], 2)

# Scale the price for 2018
mean = 1.022
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2017'] * scale_factor
    property_listing['Price2018'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2018'] = round(property_listing['Price2018'] / property_listing['Size'], 2)

# Scale the price for 2019
mean = 1.025
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2018'] * scale_factor
    property_listing['Price2019'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2019'] = round(property_listing['Price2019'] / property_listing['Size'], 2)

# Scale the price for 2020
mean = 1.027
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2019'] * scale_factor
    property_listing['Price2020'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2020'] = round(property_listing['Price2020'] / property_listing['Size'], 2)

# Scale the price for 2021
mean = 1.030
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2020'] * scale_factor
    property_listing['Price2021'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2021'] = round(property_listing['Price2021'] / property_listing['Size'], 2)

# Scale the price for 2022
mean = 1.034
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2021'] * scale_factor
    property_listing['Price2022'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2022'] = round(property_listing['Price2022'] / property_listing['Size'], 2)

# Scale the price for 2023
mean = 1.037
nMin = mean - 0.02
nMax = mean + 0.02
div = 0.01

for property_listing in property_listings:
    scale_factor = np.random.normal(mean, div)  # Generate a new scale factor for each property
    scale_factor = np.clip(scale_factor, nMin, nMax)
    scaled_price = property_listing['Price2022'] * scale_factor
    property_listing['Price2023'] = round(scaled_price, 2)
    property_listing['PricePerSquareFeet2023'] = round(property_listing['Price2023'] / property_listing['Size'], 2)


# Save the dataset as a csv file
df = pd.DataFrame(property_listings)


df.to_csv('property_listingsNew.csv', index=False)

